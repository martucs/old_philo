diff --git a/main_test3.c b/main_test3.c
index 72671cd..e055df4 100644
--- a/main_test3.c
+++ b/main_test3.c
@@ -6,7 +6,7 @@
 /*   By: martalop <marvin@42.fr>                    +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2024/10/20 21:03:04 by martalop          #+#    #+#             */
-/*   Updated: 2024/11/17 18:56:50 by martalop         ###   ########.fr       */
+/*   Updated: 2024/11/24 21:47:39 by martalop         ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -92,99 +92,106 @@ int	is_full(t_philo *phill)
 	int	full;
 
 	full = 0;	
-	if (phill && phill->info_struct->min_meals)
+	if (phill && phill->info->min_meals)
 	{
 		pthread_mutex_lock(&phill->check_mutex);
-		full = phill->meal_num >= phill->info_struct->min_meals;
+		full = phill->meal_num >= phill->info->min_meals;
 		pthread_mutex_unlock(&phill->check_mutex);
 	}
 	return (full);
 }
 
-void	my_sleep(t_philo *philos)
+void	my_sleep(t_philo *philos, unsigned long wait_time)
 {
-	int	timePasted = 0;
+	unsigned long	first_time;
 
-	while (timePasted < philos->info_struct->time_to_sleep / 1000)
+	first_time = get_current_time();
+//	first_time = get_sim_time(philos->info->start_time);
+//	printf("first_time: %lu\n", first_time);
+	while (is_alive(philos) && ((get_current_time() - first_time) < (wait_time / 1000)))
 	{
-//		printf("time passed: %d\n", timePasted);
-//		printf("time to sleep: %d\n", philos->info_struct->time_to_sleep / 1000);
-		timePasted++;
-		usleep(1000);
+//		printf("current_time for philo %d: %lu\n", philos->id, get_current_time());
+//		printf("time passed since first time: %lu\n", get_current_time() - first_time);
+	//	printf("philo id: %d\n", philos->id);
+		usleep(500);
 	}
 }
 
 void	*life_cycle(void *philos_r)
 {
 	t_philo	*philos;
+	int		special_time_eat;
 
+	special_time_eat = 0;
 	philos = (t_philo *)philos_r;
-	pthread_mutex_lock(&philos->info_struct->print_mutex);
-	pthread_mutex_unlock(&philos->info_struct->print_mutex);
-	if (philos->id % 2 == 0 /* && philos->info_struct->philo_num % 2 == 0*/)
+	pthread_mutex_lock(&philos->info->print_mutex);
+	pthread_mutex_unlock(&philos->info->print_mutex);
+	if (philos->id % 2 == 0)
 	{
-		usleep(philos->info_struct->time_to_eat - 100);
-	//	usleep(150);
+		if ((unsigned int)philos->info->time_to_eat > philos->info->time_to_die || (unsigned int)philos->info->time_to_sleep > philos->info->time_to_die)
+			special_time_eat = (5000);
+		else
+			special_time_eat = (philos->info->time_to_eat / 2);
+
+//		printf("time_to_die - 100 = %d\n", special_time_eat);
+//		printf("before usleep: %lu\n", get_sim_time(philos->info->start_time));
+		usleep((special_time_eat));
+//		printf("after usleep: %lu\n", get_sim_time(philos->info->start_time));
+//		usleep(300);
 	}
 	while (is_alive(philos))
 	{
+//		printf("philo %d enters\n", philos->id);
 		/* PIKING 1sT FORC */
 		pthread_mutex_lock(philos->right_fork); // first lock
 		pthread_mutex_lock(philos->print_mutex); 
 		if (is_alive(philos))
-			printf("%lu %d has taken a fork\n", get_sim_time(philos->info_struct->start_time), philos->id); 
+			printf("%lu %d has taken a fork\n", get_sim_time(philos->info->start_time), philos->id); 
 		pthread_mutex_unlock(philos->print_mutex); 
-
+		while (philos->info->philo_num == 1)
+		{
+			if (!is_alive(philos))
+			{
+				pthread_mutex_unlock(philos->right_fork);
+				return (philos);
+			}
+		}
 		/* PIKING 2sT FORC */
 		pthread_mutex_lock(philos->left_fork); // second lock
 		pthread_mutex_lock(philos->print_mutex); 
 		if (is_alive(philos))
-			printf("%lu %d has taken a fork\n", get_sim_time(philos->info_struct->start_time), philos->id); 
+			printf("%lu %d has taken a fork\n", get_sim_time(philos->info->start_time), philos->id); 
 		pthread_mutex_unlock(philos->print_mutex); 
 
 		/*	iting	*/
 		pthread_mutex_lock(philos->print_mutex); 
 		if (is_alive(philos))
-			printf("%lu %d is eating\n", get_sim_time(philos->info_struct->start_time), philos->id); 
+			printf("%lu %d is eating\n", get_sim_time(philos->info->start_time), philos->id); 
 		pthread_mutex_unlock(philos->print_mutex); 
 		
 		pthread_mutex_lock(&philos->check_mutex);
-		philos->last_meal_time = get_sim_time(philos->info_struct->start_time);
+		philos->last_meal_time = get_sim_time(philos->info->start_time);
 		philos->meal_num += 1;
 		pthread_mutex_unlock(&philos->check_mutex);
-	//	my_sleep(philos);
 		if (is_alive(philos))
-			usleep(philos->info_struct->time_to_eat);
-	
-	//	pthread_mutex_lock(&philos->check_mutex);
-	//	philos->last_meal_time = get_sim_time(philos->info_struct->start_time);
-	//	philos->meal_num += 1;
-	//	pthread_mutex_unlock(&philos->check_mutex);
-
-	/*	pthread_mutex_lock(philos->print_mutex); 
-		if (is_alive(philos))
-			printf("%lu %d is droping forks\n", get_sim_time(philos->info_struct->start_time), philos->id); 
-		pthread_mutex_unlock(philos->print_mutex); */
+			my_sleep(philos, philos->info->time_to_eat);
+//			usleep(philos->info->time_to_eat);
 		pthread_mutex_unlock(philos->left_fork); 
 		pthread_mutex_unlock(philos->right_fork);  // unlocked both fork mutexes
 
 		/*	driming	*/
 		pthread_mutex_lock(philos->print_mutex); 
 		if (is_alive(philos))
-			printf("%lu %d is sleeping\n", get_sim_time(philos->info_struct->start_time), philos->id); 
+			printf("%lu %d is sleeping\n", get_sim_time(philos->info->start_time), philos->id); 
 		pthread_mutex_unlock(philos->print_mutex); 
-	//	int	timePasted = 0;
-//		while (is_alive(philos) && timePasted++ < philos->info_struct->time_to_sleep)
 		if (is_alive(philos))
-			usleep(philos->info_struct->time_to_sleep);
-	//	if (is_alive(philos))
-	//		my_sleep(philos);
-	//	my_sleep(philos);
+			my_sleep(philos, philos->info->time_to_sleep);
+//			usleep(philos->info->time_to_eat);
 
 		/*	Thking	*/
 		pthread_mutex_lock(philos->print_mutex); 
 		if (is_alive(philos))
-			printf("%lu %d is thinking\n", get_sim_time(philos->info_struct->start_time), philos->id); 
+			printf("%lu %d is thinking\n", get_sim_time(philos->info->start_time), philos->id); 
 		pthread_mutex_unlock(philos->print_mutex); 
 	}
 	return (philos);
@@ -211,22 +218,22 @@ int	check_philo_status(t_philo *philo)
 	tmp = philo;
 	while (1)
 	{
-		usleep(100);
+		usleep(1000);
 		philo = tmp;
 		full_philos = 0;
 		time_passed = 0;
 		while (philo)
 		{
 			pthread_mutex_lock(&philo->check_mutex);
-			time_passed = get_sim_time(philo->info_struct->start_time) - philo->last_meal_time;
+			time_passed = get_sim_time(philo->info->start_time) - philo->last_meal_time;
 			pthread_mutex_unlock(&philo->check_mutex);
 	//		printf("philo %d current time: %lu\n", philo->id, get_current_time());
 	//		printf("philo %d last_meal_time: %lu\n", philo->id, philo->last_meal_time);
 	//		printf("philo %d time passed: %lu\n", philo->id, time_passed);
-			if (time_passed > (philo->info_struct->time_to_die / 1000)) 
+			if (time_passed > (philo->info->time_to_die / 1000)) 
 			{
 				pthread_mutex_lock(philo->print_mutex);
-				printf("%lu %d died\n", get_sim_time(philo->info_struct->start_time), philo->id);
+				printf("%lu %d died\n", get_sim_time(philo->info->start_time), philo->id);
 				kill_all_philos(tmp);
 				pthread_mutex_unlock(philo->print_mutex);
 				return (1);
@@ -235,7 +242,7 @@ int	check_philo_status(t_philo *philo)
 				full_philos++;
 			philo = philo->next;
 		}
-		if (tmp && full_philos == tmp->info_struct->philo_num)
+		if (tmp && full_philos == tmp->info->philo_num)
 		{
 			pthread_mutex_lock(tmp->print_mutex);
 			kill_all_philos(tmp);
@@ -260,12 +267,11 @@ void	start_threads(t_philo *philos, t_info *info)
 	info->start_time = get_current_time();
 	pthread_mutex_unlock(&info->print_mutex);
 	check_philo_status(philos);
-//	if (check_philo_status(philos) == 1)
-//		free_and_exit();
 	aux = philos;
 	while (aux)
 	{
 		pthread_join(aux->thread, NULL);
+//		printf("I joined thread of philo %d at %lu\n", aux->id, get_sim_time(aux->info->start_time));
 		aux = aux->next;
 	}
 }
@@ -284,11 +290,9 @@ void	init_philos(t_philo *philos, t_info *info)
 			aux->left_fork = &info->fork_array[info->philo_num - 1]; 
 		else	
 			aux->left_fork = &info->fork_array[i - 2]; 
-	//	printf("left fork for philo %d: %p\n", aux->id, aux->left_fork);
 		aux->right_fork = &info->fork_array[i - 1];
-	//	printf("right fork for philo %d: %p\n", aux->id, aux->right_fork);
 		aux->print_mutex = &info->print_mutex;
-		aux->info_struct = info;
+		aux->info = info;
 		pthread_mutex_init(&aux->check_mutex, NULL); 
 		aux = aux->next;
 		i++;
@@ -328,6 +332,23 @@ int	create_philo(t_philo **philos)
 	return (0);
 }
 
+void	free_philo_lst(t_philo **philo_lst)
+{
+	t_philo	*current;
+	t_philo	*tmp;
+
+	if (!*philo_lst)
+		return ;
+	current = *philo_lst;
+	while (current != NULL)
+	{
+		tmp = current->next;
+		free(current);
+		current = tmp;
+	}
+	*philo_lst = NULL;
+}
+
 t_philo	*game_prep(t_info *info)
 {
 	int			i;
@@ -339,7 +360,7 @@ t_philo	*game_prep(t_info *info)
 	{
 		if (create_philo(&philos) == 2)
 		{
-			// funct to free philo list before returning
+			free_philo_lst(&philos);
 			write(2, "malloc err\n", 11);
 			return (NULL);
 		}
@@ -371,6 +392,7 @@ int	check_args(char **argv)
 	return (0);
 }
 
+// QUITAR * 1000
 int	init_args(char **argv, t_info *info)
 {
 	int	i;
@@ -398,13 +420,16 @@ int	init_args(char **argv, t_info *info)
 
 void	destroy_forks(t_philo *philos, t_info *info)
 {
-	int	i;
+	int		i;
+	t_philo *tmp;
 
 	i = 0;
-	while (i < info->philo_num)
+	tmp = philos;
+	while (i < info->philo_num && tmp)
 	{
 		pthread_mutex_destroy(&info->fork_array[i]);
-		pthread_mutex_destroy(&philos->check_mutex);
+		pthread_mutex_destroy(&tmp->check_mutex);
+		tmp = tmp->next;
 		i++;
 	}
 	pthread_mutex_destroy(&info->print_mutex);
@@ -448,5 +473,7 @@ int	main(int argc, char **argv)
 		return (1);
 	start_threads(philos, &info);
 	destroy_forks(philos, &info);
+	free_philo_lst(&philos);
+	free(info.fork_array);
 	return (0);
 }
